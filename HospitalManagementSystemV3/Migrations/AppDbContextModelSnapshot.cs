// <auto-generated />
using System;
using HospitalManagementSystemV3.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagementSystemV3.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "General Checkup",
                            DoctorId = new Guid("383bf44b-f74e-4b21-be15-339866d29628"),
                            PatientId = new Guid("08742018-7f29-403d-bbc7-8fc5c095df25")
                        },
                        new
                        {
                            Id = 2,
                            Description = "Follow-up Visit",
                            DoctorId = new Guid("383bf44b-f74e-4b21-be15-339866d29628"),
                            PatientId = new Guid("a7fcb488-3a02-4b3e-a9c2-dc4793ce3bda")
                        },
                        new
                        {
                            Id = 3,
                            Description = "Consultation",
                            DoctorId = new Guid("946b8c60-77fa-49d9-8aed-b42817ca2113"),
                            PatientId = new Guid("ab17abe4-be1d-4d9c-9050-b01b29c303d8")
                        });
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("383bf44b-f74e-4b21-be15-339866d29628"),
                            Address = "123 Main St, Anytown, USA",
                            Email = "john.doe@example.com",
                            Name = "Dr. John Doe",
                            Password = "password123",
                            Phone = "123-456-7890",
                            Username = "john_doe"
                        },
                        new
                        {
                            Id = new Guid("946b8c60-77fa-49d9-8aed-b42817ca2113"),
                            Address = "456 Oak St, Anytown, USA",
                            Email = "jane.smith@example.com",
                            Name = "Dr. Jane Smith",
                            Password = "password123",
                            Phone = "098-765-4321",
                            Username = "jane_smith"
                        });
                });

            modelBuilder.Entity("HospitalManagementSystemV3.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08742018-7f29-403d-bbc7-8fc5c095df25"),
                            Address = "789 Pine St, Anytown, USA",
                            DoctorId = new Guid("383bf44b-f74e-4b21-be15-339866d29628"),
                            Email = "patient.one@example.com",
                            Name = "Patient One",
                            Password = "password123",
                            Phone = "111-222-3333",
                            Username = "patient_one"
                        },
                        new
                        {
                            Id = new Guid("a7fcb488-3a02-4b3e-a9c2-dc4793ce3bda"),
                            Address = "321 Elm St, Anytown, USA",
                            DoctorId = new Guid("383bf44b-f74e-4b21-be15-339866d29628"),
                            Email = "patient.two@example.com",
                            Name = "Patient Two",
                            Password = "password123",
                            Phone = "444-555-6666",
                            Username = "patient_two"
                        },
                        new
                        {
                            Id = new Guid("ab17abe4-be1d-4d9c-9050-b01b29c303d8"),
                            Address = "654 Birch St, Anytown, USA",
                            DoctorId = new Guid("946b8c60-77fa-49d9-8aed-b42817ca2113"),
                            Email = "patient.three@example.com",
                            Name = "Patient Three",
                            Password = "password123",
                            Phone = "777-888-9999",
                            Username = "patient_three"
                        });
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagementSystemV3.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagementSystemV3.Models.Patient", b =>
                {
                    b.HasOne("Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagementSystemV3.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
